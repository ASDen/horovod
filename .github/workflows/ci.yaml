# Do not edit this file! It has been generated by .github/gen-workflow-ci.py

name: CI

on:
  schedule:
    # run a build on master (this does not publish test results or cancel concurrent builds)
    - cron: '0 10 * * *' # everyday at 10am
  push:
    # only consider push to master and tags
    # otherwise modify job.config.outputs.push
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    # only consider pull requests into master
    branches: [ master ]
  workflow_dispatch:

concurrency:
  # This controls which concurrent builds to cancel:
  # - we do not want any concurrent builds on a branch (pull_request)
  # - we do not want concurrent builds on the same commit on master (push)
  # - we do not want concurrent builds on the same commit on a tag (push)
  # - we allow concurrent runs on the same commit on master and its tag (push)
  # - we allow concurrent runs on the same commit on master (push) and a scheduled build (schedule)
  #
  # A pull_request event only runs on branch commit, a push event only on master and tag commit.
  # A schedule event only runs on master HEAD commit.
  #
  # Expression github.ref means something like refs/heads/master or refs/tags/v0.22.1 or the branch.
  # This helps to not cancel concurrent runs on master or a tag that share the same commit.
  # Expression github.head_ref refers to the branch of the pull request.
  # On master, github.head_ref is empty, so we use the SHA of the commit, this means individual
  # commits to master will not be cancelled, while there can only be one concurrent build on a branch.
  #
  # We include the event name to we allow for concurrent scheduled and master builds.
  group: ci-${{ github.event_name }}-${{ github.ref }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Debug Action
      uses: hmarr/debug-action@v1.0.0
    - name: Debug Concurrency
      run: echo "ci-${{ github.event_name }}-${{ github.ref }}-${{ github.head_ref || github.sha }}"

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: Event File
        path: ${{ github.event_path }}

  init-workflow:
    name: "Init Workflow"
    runs-on: ubuntu-latest
    outputs:
      run-at-all: ${{ github.event_name != 'schedule' || github.repository == 'horovod/horovod' }}
      # if we don't get a clear 'false', we fall back to building and testing
      run-builds-and-tests: ${{ steps.tests.outputs.needed != 'false' }}
      buildkite-branch-label: "${{ steps.config-buildkite.outputs.branch-label }}"
      buildkite-message: "${{ steps.config-buildkite.outputs.message }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Pip install dependencies
        run: pip install -r .github/requirements.txt

      - name: Check ci.yaml is up-to-date
        run: |
          python .github/gen-workflow-ci.py
          if [[ $(git diff .github/workflows/ci.yaml | wc -l) -gt 0 ]]
          then
            echo "::error::Workflow file .github/workflows/ci.yaml is out-dated, please run .github/gen-workflow-ci.py and commit changes"
            exit 1
          fi
        shell: bash

      - name: Check if tests are needed
        id: tests
        env:
          GITHUB_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]
          then
            changes="$(python .github/get-changed-code-files.py)"
            if [[ -z "$changes" ]]
            then
              echo "No code changes, no need to build and test"
              echo "::set-output name=needed::false"
            else
              echo "Code changes, we need to build and test:"
              echo "$changes"
              echo "::set-output name=needed::true"
            fi
          else
            echo "This is not part of a pull request, we need to build and test"
            echo "::set-output name=needed::true"
          fi

      - name: Configure Buildkite Build
        id: config-buildkite
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          branch="${{ github.event.pull_request.head.ref || github.ref }}"
          branch="${branch#"refs/heads/"}"
          branch="${branch#"refs/tags/"}"

          branch_label="${branch}"
          if [[ "${{ github.event_name }}" == "schedule" ]]
          then
            # we add this label to the branch used by Buildkite to avoid it cancelling one of concurrent schedule and push builds on master
            branch_label="${branch} (schedule)"
          fi
          echo "::set-output name=branch-label::${branch_label}"

          if [[ "${{ github.event_name }}" == "pull_request" ]]
          then
            head_sha="${{ github.event.pull_request.head.sha }}"
            message="$(gh api https://api.github.com/repos/horovod/horovod/commits/${head_sha} -q .commit.message | head -n1)"
            echo "::set-output name=message::${message}"
          fi

      - name: Provide PR meta
        if: github.event_name == 'pull_request'
        run: |
          rm -f pr.json
          echo -n "{" >> pr.json
          echo -n " \"merge_sha\": \"${{ github.sha }}\"," >> pr.json
          echo -n " \"base_sha\": \"${{ github.event.pull_request.base.sha }}\"," >> pr.json
          echo -n " \"head_sha\": \"${{ github.event.pull_request.head.sha }}\" " >> pr.json
          echo -n "}" >> pr.json
          cat pr.json

      - name: Upload PR meta
        uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: PR Meta
          path: pr.json


  docker-config:
    name: Configure docker build
    needs: [init-workflow]
    # build-and-test-cpu, build-gpu and buildkite might have been skipped (! needs.init-workflow.outputs.run-builds-and-tests)
    # buildkite might have been skipped (workflow runs for a fork PR),
    # we still want to build docker images (though we might not want to push them)
    if: >
      always()
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.config.outputs.run }}
      push: ${{ steps.config.outputs.push }}

    steps:
      - name: Config
        id: config
        env:
          # run workflow for all events on Horovod repo and non-schedule events on forks
          run: ${{ github.repository == 'horovod/horovod' || github.event_name != 'schedule' }}
          # push images only from Horovod repo and for schedule and push events
          push: ${{ github.repository == 'horovod/horovod' && contains('schedule,push', github.event_name) }}
        run: |
          echo Repository: ${{ github.repository }}
          echo Event: ${{ github.event_name }}
          echo Run: $run
          echo "::set-output name=run::$run"
          echo Push: $push
          echo "::set-output name=push::$push"

  docker-build:
    name: Build docker image ${{ matrix.docker-image }} (push=${{ needs.docker-config.outputs.push }})
    needs: docker-config
    if: always() && needs.docker-config.outputs.run == 'true'
    runs-on: ubuntu-latest

    # we want an ongoing run of this workflow to be canceled by a later commit
    # so that there is only one concurrent run of this workflow for each branch
    concurrency:
      # github.ref means something like refs/heads/master or refs/tags/v0.22.1 or the branch.
      # This helps to not cancel concurrent runs on master and a tag that share the same commit
      # head_ref refers to the pull request branch so we run only one workflow for the given pull request.
      # On master, head_ref is empty, so we use the SHA of the commit, this means
      # commits to master will not be cancelled, which is important to ensure
      # that every commit to master is full tested and deployed.
      group: docker-${{ matrix.docker-image }}-${{ github.ref }}-${{ github.head_ref || github.sha }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        docker-image:
          - horovod
          - horovod-cpu
          - horovod-ray

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            horovod/${{ matrix.docker-image }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: needs.docker-config.outputs.push == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Clean up disk space
        run: |
          echo ::group::Disk space before clean up
          df -h

          echo ::endgroup::
          for dir in /home/runner/runners/*.tgz \
                     /usr/lib/google-cloud-sdk \
                     /usr/lib/mono \
                     /usr/local/lib/android \
                     /usr/local/share/chromium \
                     /usr/share/dotnet \
                     /opt/ghc \
                     /opt/google/chrome \
                     /opt/hostedtoolcache/go \
                     /opt/hostedtoolcache/CodeQL
          do
            echo ::group::Deleting "$dir"
            sudo du -hsc $dir | tail -n1 || true
            sudo rm -rf $dir
            echo ::endgroup::
          done

          echo ::group::Disk space after clean up
          df -h
          echo ::endgroup::

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/${{ matrix.docker-image }}/Dockerfile
          load: true
          push: ${{ needs.docker-config.outputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan for vulnerabilities
        id: scan
        if: matrix.docker-image != 'horovod-ray'
        uses: crazy-max/ghaction-container-scan@v1
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          dockerfile: ./docker/${{ matrix.docker-image }}/Dockerfile
        env:
          TRIVY_TIMEOUT: 15m
      - name: Upload SARIF file
        if: steps.scan.outputs.sarif != ''
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
